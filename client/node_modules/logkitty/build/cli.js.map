{"version":3,"sources":["../src/cli.ts"],"names":["priorityOptions","U","alias","boolean","default","describe","V","D","I","W","E","F","S","argv","_","command","args","yargs","usage","demandCommand","option","type","example","help","version","selectedPriorities","Boolean","u","v","d","i","w","e","f","s","filter","appId","tags","regexes","map","value","RegExp","patterns","emitter","platform","priority","on","entry","process","stdout","write","error","terminate","console","log","exit"],"mappings":"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","sourcesContent":["import yargs from 'yargs';\nimport {\n  logkitty,\n  makeAppFilter,\n  makeTagsFilter,\n  makeMatchFilter,\n  makeCustomFilter,\n  FilterCreator,\n} from './api';\nimport { formatEntry, formatError } from './formatters';\nimport { CodeError } from './errors';\nimport { getMinPriority } from './utils';\nimport { Entry } from './types';\n\nconst priorityOptions = {\n  U: {\n    alias: 'u',\n    boolean: true,\n    default: false,\n    describe: 'unknown priority',\n  },\n  V: {\n    alias: 'v',\n    boolean: true,\n    default: false,\n    describe: 'verbose priority',\n  },\n  D: { alias: 'd', boolean: true, default: false, describe: 'debug priority' },\n  I: { alias: 'i', boolean: true, default: false, describe: 'info priority' },\n  W: { alias: 'w', boolean: true, default: false, describe: 'warn priority' },\n  E: { alias: 'e', boolean: true, default: false, describe: 'error priority' },\n  F: { alias: 'f', boolean: true, default: false, describe: 'fatal priority' },\n  S: { alias: 's', boolean: true, default: false, describe: 'silent priority' },\n};\n\nconst {\n  argv: {\n    _: [command],\n    ...args\n  },\n} = yargs\n  .usage('Usage: $0 [options] <command>')\n  .command('tag <tags ...>', 'Show logs matching given tags', priorityOptions)\n  .command(\n    'app <appId>',\n    'Show logs from application with given identifier',\n    priorityOptions\n  )\n  .command(\n    'match <regexes...>',\n    'Show logs matching given patterns',\n    priorityOptions\n  )\n  .command(\n    'custom <patterns ...>',\n    'Filter using custom patterns <tag>:<priority>'\n  )\n  .command('all', 'Show all logs', priorityOptions)\n  .demandCommand(1)\n  .option('adb-path', {\n    type: 'string',\n    describe: 'Use custom path to ADB',\n  })\n  .example('$0 tag MyTag', 'Filter logs to only include ones with MyTag tag')\n  .example(\n    '$0 tag MyTag -I',\n    'Filter logs to only include ones with MyTag tag and priority INFO and above'\n  )\n  .example('$0 app com.example.myApp', 'Show all logs from com.example.myApp')\n  .example('$0 match device', 'Show all logs matching /device/gm regex')\n  .example(\n    '$0 app com.example.myApp -E',\n    'Show all logs from com.example.myApp with priority ERROR and above'\n  )\n  .example(\n    '$0 custom *:S MyTag:D',\n    'Silence all logs and show only ones with MyTag with priority DEBUG and above'\n  )\n  .help('h')\n  .alias('h', 'help')\n  .alias('v', 'version')\n  .version();\n\nconst selectedPriorities = {\n  U: Boolean(args.u),\n  V: Boolean(args.v),\n  D: Boolean(args.d),\n  I: Boolean(args.i),\n  W: Boolean(args.w),\n  E: Boolean(args.e),\n  F: Boolean(args.f),\n  S: Boolean(args.s),\n};\n\ntry {\n  let filter: FilterCreator | undefined;\n  switch (command) {\n    case 'app':\n      filter = makeAppFilter(args.appId as string);\n      break;\n    case 'tag':\n      filter = makeTagsFilter(...(args.tags as string[]));\n      break;\n    case 'match':\n      filter = makeMatchFilter(\n        ...(args.regexes as string[]).map(\n          (value: string) => new RegExp(value, 'gm')\n        )\n      );\n      break;\n    case 'custom':\n      filter = makeCustomFilter(...(args.patterns as string[]));\n      break;\n    case 'all':\n    default:\n  }\n\n  const emitter = logkitty({\n    platform: 'android',\n    priority: getMinPriority(selectedPriorities),\n    filter,\n  });\n\n  emitter.on('entry', (entry: Entry) => {\n    process.stdout.write(formatEntry(entry));\n  });\n\n  emitter.on('error', (error: Error) => {\n    terminate(error);\n  });\n} catch (error) {\n  terminate(error as Error | CodeError);\n}\n\nfunction terminate(error: CodeError | Error) {\n  // tslint:disable-next-line: no-console\n  console.log(formatError(error));\n  process.exit(1);\n}\n"],"file":"cli.js"}