"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTagsFilter = makeTagsFilter;
exports.makeAppFilter = makeAppFilter;
exports.makeMatchFilter = makeMatchFilter;
exports.makeCustomFilter = makeCustomFilter;
exports.logkitty = logkitty;
Object.defineProperty(exports, "Entry", {
  enumerable: true,
  get: function () {
    return _types.Entry;
  }
});
Object.defineProperty(exports, "formatEntry", {
  enumerable: true,
  get: function () {
    return _formatters.formatEntry;
  }
});
Object.defineProperty(exports, "formatError", {
  enumerable: true,
  get: function () {
    return _formatters.formatError;
  }
});
Object.defineProperty(exports, "Priority", {
  enumerable: true,
  get: function () {
    return _constants.Priority;
  }
});

var _types = require("./types");

var _events = require("events");

var _AndroidFilter = require("./android/AndroidFilter");

var _adb = require("./android/adb");

var _AndroidParser = _interopRequireDefault(require("./android/AndroidParser"));

var _formatters = require("./formatters");

var _constants = require("./android/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeTagsFilter(...tags) {
  return minPriority => {
    const filter = new _AndroidFilter.AndroidFilter(minPriority);
    filter.setFilterByTag(tags);
    return filter;
  };
}

function makeAppFilter(appIdentifier) {
  return (minPriority, adbPath) => {
    const filter = new _AndroidFilter.AndroidFilter(minPriority);
    filter.setFilterByApp(appIdentifier, adbPath);
    return filter;
  };
}

function makeMatchFilter(...regexes) {
  return minPriority => {
    const filter = new _AndroidFilter.AndroidFilter(minPriority);
    filter.setFilterByMatch(regexes);
    return filter;
  };
}

function makeCustomFilter(...patterns) {
  return minPriority => {
    const filter = new _AndroidFilter.AndroidFilter(minPriority);
    filter.setCustomFilter(patterns);
    return filter;
  };
}

function logkitty(options) {
  const {
    platform,
    adbPath,
    priority,
    filter: createFilter
  } = options;
  const emitter = new _events.EventEmitter();

  if (platform !== 'android') {
    emitter.emit('error', new Error(`Platform ${platform} is not supported`));
    return emitter;
  }

  const parser = new _AndroidParser.default();
  const filter = createFilter ? createFilter(priority, adbPath) : new _AndroidFilter.AndroidFilter(priority);
  const loggingProcess = (0, _adb.runLoggingProcess)(adbPath);
  process.on('exit', () => {
    loggingProcess.kill();
    emitter.emit('exit');
  });
  loggingProcess.stdout.on('data', raw => {
    try {
      const messages = parser.splitMessages(raw.toString());
      const entries = parser.parseMessages(messages);
      entries.forEach(entry => {
        if (filter.shouldInclude(entry)) {
          emitter.emit('entry', entry);
        }
      });
    } catch (error) {
      emitter.emit('error', error);
    }
  });
  loggingProcess.stdout.on('error', error => {
    emitter.emit('error', error);
    emitter.emit('exit');
  });
  return emitter;
}
//# sourceMappingURL=api.js.map