"use strict";

var _yargs = _interopRequireDefault(require("yargs"));

var _api = require("./api");

var _formatters = require("./formatters");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const priorityOptions = {
  U: {
    alias: 'u',
    boolean: true,
    default: false,
    describe: 'unknown priority'
  },
  V: {
    alias: 'v',
    boolean: true,
    default: false,
    describe: 'verbose priority'
  },
  D: {
    alias: 'd',
    boolean: true,
    default: false,
    describe: 'debug priority'
  },
  I: {
    alias: 'i',
    boolean: true,
    default: false,
    describe: 'info priority'
  },
  W: {
    alias: 'w',
    boolean: true,
    default: false,
    describe: 'warn priority'
  },
  E: {
    alias: 'e',
    boolean: true,
    default: false,
    describe: 'error priority'
  },
  F: {
    alias: 'f',
    boolean: true,
    default: false,
    describe: 'fatal priority'
  },
  S: {
    alias: 's',
    boolean: true,
    default: false,
    describe: 'silent priority'
  }
};

const {
  argv: {
    _: [command],
    ...args
  }
} = _yargs.default.usage('Usage: $0 [options] <command>').command('tag <tags ...>', 'Show logs matching given tags', priorityOptions).command('app <appId>', 'Show logs from application with given identifier', priorityOptions).command('match <regexes...>', 'Show logs matching given patterns', priorityOptions).command('custom <patterns ...>', 'Filter using custom patterns <tag>:<priority>').command('all', 'Show all logs', priorityOptions).demandCommand(1).option('adb-path', {
  type: 'string',
  describe: 'Use custom path to ADB'
}).example('$0 tag MyTag', 'Filter logs to only include ones with MyTag tag').example('$0 tag MyTag -I', 'Filter logs to only include ones with MyTag tag and priority INFO and above').example('$0 app com.example.myApp', 'Show all logs from com.example.myApp').example('$0 match device', 'Show all logs matching /device/gm regex').example('$0 app com.example.myApp -E', 'Show all logs from com.example.myApp with priority ERROR and above').example('$0 custom *:S MyTag:D', 'Silence all logs and show only ones with MyTag with priority DEBUG and above').help('h').alias('h', 'help').alias('v', 'version').version();

const selectedPriorities = {
  U: Boolean(args.u),
  V: Boolean(args.v),
  D: Boolean(args.d),
  I: Boolean(args.i),
  W: Boolean(args.w),
  E: Boolean(args.e),
  F: Boolean(args.f),
  S: Boolean(args.s)
};

try {
  let filter;

  switch (command) {
    case 'app':
      filter = (0, _api.makeAppFilter)(args.appId);
      break;

    case 'tag':
      filter = (0, _api.makeTagsFilter)(...args.tags);
      break;

    case 'match':
      filter = (0, _api.makeMatchFilter)(...args.regexes.map(value => new RegExp(value, 'gm')));
      break;

    case 'custom':
      filter = (0, _api.makeCustomFilter)(...args.patterns);
      break;

    case 'all':
    default:
  }

  const emitter = (0, _api.logkitty)({
    platform: 'android',
    priority: (0, _utils.getMinPriority)(selectedPriorities),
    filter
  });
  emitter.on('entry', entry => {
    process.stdout.write((0, _formatters.formatEntry)(entry));
  });
  emitter.on('error', error => {
    terminate(error);
  });
} catch (error) {
  terminate(error);
}

function terminate(error) {
  // tslint:disable-next-line: no-console
  console.log((0, _formatters.formatError)(error));
  process.exit(1);
}
//# sourceMappingURL=cli.js.map