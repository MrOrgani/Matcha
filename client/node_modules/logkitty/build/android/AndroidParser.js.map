{"version":3,"sources":["../../src/android/AndroidParser.ts"],"names":["AndroidParser","splitMessages","raw","messages","data","toString","match","timeRegex","timeHeader","slice","index","length","nextMatch","body","push","parseMessages","map","rawMessage","timeMatch","Error","headerMatch","headerRegex","priority","tag","pid","now","Date","date","getFullYear","getMonth","getDate","parseInt","trim","Priority","fromLetter","reduce","acc","entry","getTime"],"mappings":"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","sourcesContent":["import { IParser, Entry } from '../types';\nimport { Priority } from './constants';\n\nexport default class AndroidParser implements IParser {\n  static timeRegex: RegExp = /\\d{2}-\\d{2} (\\d{2}):(\\d{2}):(\\d{2}).\\d{3}/m;\n  static headerRegex: RegExp = /^\\s*(\\w)\\/(.+)\\(([\\s\\d]+)\\):/;\n\n  splitMessages(raw: string): string[] {\n    const messages: string[] = [];\n    let data = raw.toString();\n    let match = data.match(AndroidParser.timeRegex);\n    while (match) {\n      const timeHeader = match[0];\n      data = data.slice((match.index || 0) + timeHeader.length);\n      const nextMatch = data.match(AndroidParser.timeRegex);\n      const body = nextMatch ? data.slice(0, nextMatch.index) : data;\n      messages.push(`${timeHeader} ${body}`);\n      match = nextMatch;\n    }\n    return messages;\n  }\n\n  parseMessages(messages: string[]): Entry[] {\n    return messages\n      .map((rawMessage: string) => {\n        const timeMatch = rawMessage.match(AndroidParser.timeRegex);\n        if (!timeMatch) {\n          throw new Error(\n            `Time regex was not matched in message: ${rawMessage}`\n          );\n        }\n\n        const headerMatch = rawMessage\n          .slice(timeMatch[0].length)\n          .match(AndroidParser.headerRegex) || ['', 'U', 'unknown', '-1'];\n\n        const [, priority, tag, pid] = headerMatch;\n        const now = new Date();\n        return {\n          date: new Date(\n            now.getFullYear(),\n            now.getMonth(),\n            now.getDate(),\n            parseInt(timeMatch[1], 10),\n            parseInt(timeMatch[2], 10),\n            parseInt(timeMatch[3], 10)\n          ),\n          pid: parseInt(pid.trim(), 10) || 0,\n          priority: Priority.fromLetter(priority),\n          tag: tag.trim() || 'unknown',\n          messages: [\n            rawMessage\n              .slice(timeMatch[0].length + headerMatch[0].length)\n              .trim(),\n          ],\n        };\n      })\n      .reduce((acc: Entry[], entry: Entry) => {\n        if (\n          acc.length > 0 &&\n          acc[acc.length - 1].date.getTime() === entry.date.getTime() &&\n          acc[acc.length - 1].tag === entry.tag &&\n          acc[acc.length - 1].pid === entry.pid &&\n          acc[acc.length - 1].priority === entry.priority\n        ) {\n          acc[acc.length - 1].messages.push(...entry.messages);\n          return acc;\n        }\n\n        return [...acc, entry];\n      }, []);\n  }\n}\n"],"file":"AndroidParser.js"}