{"version":3,"sources":["../src/api.ts"],"names":["makeTagsFilter","tags","minPriority","filter","AndroidFilter","setFilterByTag","makeAppFilter","appIdentifier","adbPath","setFilterByApp","makeMatchFilter","regexes","setFilterByMatch","makeCustomFilter","patterns","setCustomFilter","logkitty","options","platform","priority","createFilter","emitter","EventEmitter","emit","Error","parser","AndroidParser","loggingProcess","process","on","kill","stdout","raw","messages","splitMessages","toString","entries","parseMessages","forEach","entry","shouldInclude","error"],"mappings":"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","sourcesContent":["import { IFilter, Entry } from './types';\nimport { EventEmitter } from 'events';\nimport { AndroidFilter } from './android/AndroidFilter';\nimport { runLoggingProcess } from './android/adb';\nimport AndroidParser from './android/AndroidParser';\n\nexport { formatEntry, formatError } from './formatters';\nexport { Priority } from './android/constants';\nexport { Entry } from './types';\n\nexport type LogkittyOptions = {\n  platform: 'android';\n  adbPath?: string;\n  priority?: number;\n  filter?: FilterCreator;\n};\n\nexport type FilterCreator = (minPriority?: number, adbPath?: string) => IFilter;\n\nexport function makeTagsFilter(...tags: string[]): FilterCreator {\n  return (minPriority?: number) => {\n    const filter = new AndroidFilter(minPriority);\n    filter.setFilterByTag(tags);\n    return filter;\n  };\n}\n\nexport function makeAppFilter(appIdentifier: string): FilterCreator {\n  return (minPriority?: number, adbPath?: string) => {\n    const filter = new AndroidFilter(minPriority);\n    filter.setFilterByApp(appIdentifier, adbPath);\n    return filter;\n  };\n}\n\nexport function makeMatchFilter(...regexes: RegExp[]): FilterCreator {\n  return (minPriority?: number) => {\n    const filter = new AndroidFilter(minPriority);\n    filter.setFilterByMatch(regexes);\n    return filter;\n  };\n}\n\nexport function makeCustomFilter(...patterns: string[]): FilterCreator {\n  return (minPriority?: number) => {\n    const filter = new AndroidFilter(minPriority);\n    filter.setCustomFilter(patterns);\n    return filter;\n  };\n}\n\nexport function logkitty(options: LogkittyOptions): EventEmitter {\n  const { platform, adbPath, priority, filter: createFilter } = options;\n  const emitter = new EventEmitter();\n\n  if (platform !== 'android') {\n    emitter.emit('error', new Error(`Platform ${platform} is not supported`));\n    return emitter;\n  }\n\n  const parser = new AndroidParser();\n  const filter = createFilter\n    ? createFilter(priority, adbPath)\n    : new AndroidFilter(priority);\n  const loggingProcess = runLoggingProcess(adbPath);\n\n  process.on('exit', () => {\n    loggingProcess.kill();\n    emitter.emit('exit');\n  });\n\n  loggingProcess.stdout.on('data', (raw: string | Buffer) => {\n    try {\n      const messages = parser.splitMessages(raw.toString());\n      const entries = parser.parseMessages(messages);\n      entries.forEach((entry: Entry) => {\n        if (filter.shouldInclude(entry)) {\n          emitter.emit('entry', entry);\n        }\n      });\n    } catch (error) {\n      emitter.emit('error', error);\n    }\n  });\n\n  loggingProcess.stdout.on('error', (error: Error) => {\n    emitter.emit('error', error);\n    emitter.emit('exit');\n  });\n\n  return emitter;\n}\n"],"file":"api.js"}