{"ast":null,"code":"import _slicedToArray from \"/Users/vlecoq-v/42/Matcha/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vlecoq-v/42/Matcha/client/src/Scenes/SignIn/Components/Register/Register.js\";\nimport React, { useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport RegisterValidation from \"../UserValidation\"; // const { userSchema } = require(\"../../../../Schemas\");\n// import { DisplayFormikState } from './formikHelper';\n\nconst styles = {};\n\nfunction Register(props) {\n  const classes = props.classes;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSubmitionCompleted = _useState4[0],\n        setSubmitionCompleted = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isValid = _useState6[0],\n        setValid = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        textError = _useState8[0],\n        setTextError = _useState8[1];\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleClickOpen() {\n    setSubmitionCompleted(false);\n    setOpen(true);\n  }\n\n  const initialState = {\n    login: \"\",\n    email: \"\",\n    password: \"\"\n  };\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Create an Account\"), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose // aria-labelledby=\"form-dialog-title\"\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, !isSubmitionCompleted && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Register\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Please complete the form to meet new people\"), React.createElement(Formik, {\n    initialValues: initialState,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setSubmitting(true);\n      axios.post(\"http://localhost:9000/api/user/register\", values, {\n        headers: {\n          // \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        // console.log(\"response de l'API\", res);\n        if (res.status === 200) setSubmitionCompleted(true);else {\n          let errorStr = \"\";\n          setSubmitionCompleted(true);\n          setValid(false);\n\n          if (typeof res.data !== \"string\") {\n            for (let strKey in res.data) {\n              errorStr += res.data[strKey] + \"\\n\";\n            }\n          } else {\n            errorStr = res.data;\n          }\n\n          setTextError(errorStr.trim());\n        }\n      });\n    },\n    validate: RegisterValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props => {\n    const values = props.values,\n          touched = props.touched,\n          errors = props.errors,\n          dirty = props.dirty,\n          isSubmitting = props.isSubmitting,\n          handleChange = props.handleChange,\n          handleBlur = props.handleBlur,\n          handleSubmit = props.handleSubmit,\n          handleReset = props.handleReset; // console.log(errors.login, touched.login);\n\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"login\",\n      name: \"login\",\n      className: classes.textField,\n      value: values.login,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.login && touched.login && errors.login,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      error: errors.email && touched.email,\n      label: \"email\",\n      name: \"email\",\n      className: classes.textField,\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.email && touched.email && errors.email,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      error: errors.password && touched.password,\n      label: \"password\",\n      name: \"password\",\n      className: classes.textField,\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.password && touched.password && errors.password,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      className: \"outline\",\n      onClick: handleReset,\n      disabled: !dirty || isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(Button, {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Submit\")));\n  }))), isSubmitionCompleted && isValid && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Thanks!\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Your registration is almost complete! \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), \"You received a confirmation email\"), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Back to app\")))), isSubmitionCompleted && !isValid && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Oupsy!\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, textError), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Back to app\"))))));\n}\n\nexport default withStyles(styles)(Register);","map":{"version":3,"sources":["/Users/vlecoq-v/42/Matcha/client/src/Scenes/SignIn/Components/Register/Register.js"],"names":["React","useState","withStyles","TextField","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","axios","Formik","RegisterValidation","styles","Register","props","classes","open","setOpen","isSubmitionCompleted","setSubmitionCompleted","isValid","setValid","textError","setTextError","handleClose","handleClickOpen","initialState","login","email","password","values","setSubmitting","post","headers","then","res","status","errorStr","data","strKey","trim","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","textField"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport RegisterValidation from \"../UserValidation\";\n// const { userSchema } = require(\"../../../../Schemas\");\n// import { DisplayFormikState } from './formikHelper';\n\nconst styles = {};\n\nfunction Register(props) {\n  const { classes } = props;\n  const [open, setOpen] = useState(false);\n  const [isSubmitionCompleted, setSubmitionCompleted] = useState(false);\n  const [isValid, setValid] = useState(true);\n  const [textError, setTextError] = useState(\"\");\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleClickOpen() {\n    setSubmitionCompleted(false);\n    setOpen(true);\n  }\n\n  const initialState = {\n    login: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Create an Account\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        // aria-labelledby=\"form-dialog-title\"\n      >\n        {!isSubmitionCompleted && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Register</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Please complete the form to meet new people\n              </DialogContentText>\n              <Formik\n                initialValues={initialState}\n                onSubmit={(values, { setSubmitting }) => {\n                  setSubmitting(true);\n                  axios\n                    .post(\"http://localhost:9000/api/user/register\", values, {\n                      headers: {\n                        // \"Access-Control-Allow-Origin\": \"*\",\n                        \"Content-Type\": \"application/json\"\n                      }\n                    })\n                    .then(res => {\n                      // console.log(\"response de l'API\", res);\n                      if (res.status === 200) setSubmitionCompleted(true);\n                      else {\n                        let errorStr = \"\";\n                        setSubmitionCompleted(true);\n                        setValid(false);\n                        if (typeof res.data !== \"string\") {\n                          for (let strKey in res.data) {\n                            errorStr += res.data[strKey] + \"\\n\";\n                          }\n                        } else {\n                          errorStr = res.data;\n                        }\n                        setTextError(errorStr.trim());\n                      }\n                    });\n                }}\n                validate={RegisterValidation}\n              >\n                {props => {\n                  const {\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    handleReset\n                  } = props;\n\n                  // console.log(errors.login, touched.login);\n                  return (\n                    <form onSubmit={handleSubmit}>\n                      <TextField\n                        label=\"login\"\n                        name=\"login\"\n                        className={classes.textField}\n                        value={values.login}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.login && touched.login && errors.login\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <TextField\n                        error={errors.email && touched.email}\n                        label=\"email\"\n                        name=\"email\"\n                        className={classes.textField}\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.email && touched.email && errors.email\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <br />\n                      <TextField\n                        error={errors.password && touched.password}\n                        label=\"password\"\n                        name=\"password\"\n                        className={classes.textField}\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.password && touched.password && errors.password\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <DialogActions>\n                        <Button\n                          type=\"button\"\n                          className=\"outline\"\n                          onClick={handleReset}\n                          disabled={!dirty || isSubmitting}\n                        >\n                          Reset\n                        </Button>\n                        <Button type=\"submit\" disabled={isSubmitting}>\n                          Submit\n                        </Button>\n                        {/* <DisplayFormikState {...props} /> */}\n                      </DialogActions>\n                    </form>\n                  );\n                }}\n              </Formik>\n            </DialogContent>\n          </React.Fragment>\n        )}\n        {isSubmitionCompleted && isValid && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Thanks!</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Your registration is almost complete! <br />\n                You received a confirmation email\n              </DialogContentText>\n              <DialogActions>\n                <Button type=\"button\" className=\"outline\" onClick={handleClose}>\n                  Back to app\n                </Button>\n                {/* <DisplayFormikState {...props} /> */}\n              </DialogActions>\n            </DialogContent>\n          </React.Fragment>\n        )}\n        {isSubmitionCompleted && !isValid && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Oupsy!</DialogTitle>\n            <DialogContent>\n              <DialogContentText>{textError}</DialogContentText>\n              <DialogActions>\n                <Button type=\"button\" className=\"outline\" onClick={handleClose}>\n                  Back to app\n                </Button>\n                {/* <DisplayFormikState {...props} /> */}\n              </DialogActions>\n            </DialogContent>\n          </React.Fragment>\n        )}\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(Register);\n"]},"metadata":{},"sourceType":"module"}