{"ast":null,"code":"import { each, createInterpolator, is, toArray, Globals, useForceUpdate, useOnce } from '@react-spring/shared';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { createAnimatedTransform, createAnimatedInterpolation, now, createAnimatedStyle, applyAnimatedValues, getComponentProps } from '@react-spring/shared/globals';\nexport { createAnimatedInterpolation as to } from '@react-spring/shared/globals';\nimport { deprecateInterpolate } from '@react-spring/shared/deprecations';\nimport invariant from 'tiny-invariant';\nimport React, { forwardRef, useRef, useEffect } from 'react';\n\nvar _a;\n\nconst animatedTag = Symbol.for('isAnimated');\n\nconst isAnimated = val => !!(val && val[animatedTag]);\n\nclass Animated {\n  constructor() {\n    this[_a] = true;\n    this.children = new Set();\n  }\n  /** Returns the set of `AnimatedValue` nodes contained by this node. */\n\n\n  getPayload() {\n    return this.payload;\n  }\n  /** Returns the set of animated nodes that depend on this node. */\n\n\n  getChildren() {\n    return this.children;\n  }\n\n  addChild(child) {\n    this.children.size || this._attach();\n    this.children.add(child);\n  }\n\n  removeChild(child) {\n    this.children.delete(child);\n    this.children.size || this._detach();\n  }\n\n}\n\n_a = animatedTag;\n\nclass AnimatedObject extends Animated {\n  constructor(source) {\n    super();\n    this.source = source;\n    this.payload = toPayload(source);\n  }\n\n  getValue(animated) {\n    const obj = {};\n    each(this.source, (val, key) => {\n      if (isAnimated(val)) {\n        obj[key] = val.getValue(animated);\n      } else if (!animated) {\n        obj[key] = val;\n      }\n    });\n    return obj;\n  }\n\n  updatePayload(prev, next) {\n    const source = _extends({}, this.source);\n\n    each(source, (val, key) => {\n      if (val === prev) source[key] = next;\n    });\n    this.source = source;\n    this.payload = toPayload(source);\n  }\n\n  _attach() {\n    each(this.source, addChild, this);\n  }\n\n  _detach() {\n    each(this.source, removeChild, this);\n  }\n\n}\n/** Convert an array or object to a flat payload */\n\n\nfunction toPayload(source) {\n  const payload = new Set();\n  each(source, val => {\n    if (isAnimated(val)) {\n      each(val.getPayload(), node => payload.add(node));\n    }\n  });\n  return payload;\n}\n\nfunction addChild(parent) {\n  if (isAnimated(parent)) parent.addChild(this);\n}\n\nfunction removeChild(parent) {\n  if (isAnimated(parent)) parent.removeChild(this);\n}\n\nclass AnimatedStyle extends AnimatedObject {\n  constructor(style) {\n    if (style === void 0) {\n      style = {};\n    }\n\n    super(style.transform && createAnimatedTransform ? _extends({}, style, {\n      transform: createAnimatedTransform(style.transform)\n    }) : style);\n  }\n\n}\n\nconst interpolate = function interpolate() {\n  deprecateInterpolate();\n  return createAnimatedInterpolation(...arguments);\n};\n\nclass AnimatedInterpolation extends Animated {\n  constructor(source, args) {\n    super();\n    this.source = source;\n    this.calc = createInterpolator(...args);\n  }\n\n  getValue(animated) {\n    const args = is.arr(this.source) ? this.source.map(node => node.getValue(animated)) : toArray(this.source.getValue(animated));\n    return this.calc(...args);\n  }\n\n  to() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return createAnimatedInterpolation(this, ...args);\n  }\n\n  interpolate() {\n    deprecateInterpolate();\n    return this.to(...arguments);\n  }\n\n  getPayload() {\n    return is.arr(this.source) ? this.payload || (this.payload = toPayload(this.source)) : this.source.getPayload();\n  }\n\n  updatePayload(prev, next) {\n    this.payload = void 0;\n\n    if (is.arr(this.source)) {\n      const source = [...this.source];\n      each(source, (val, index) => {\n        if (val === prev) source[index] = next;\n      });\n      this.source = source;\n    } else {\n      this.source = next;\n    }\n  }\n\n  _attach() {\n    each(toArray(this.source), addChild, this);\n  }\n\n  _detach() {\n    each(toArray(this.source), removeChild, this);\n  }\n\n}\n\nGlobals.assign({\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  createAnimatedInterpolation: function createAnimatedInterpolation(parents) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return new AnimatedInterpolation(parents, args);\n  }\n});\n/** An animated number or a native attribute value */\n\nclass AnimatedValue extends Animated {\n  constructor(value) {\n    super();\n    this.views = new Set();\n    this.done = false;\n    this.value = value;\n    this.payload = new Set([this]);\n\n    if (is.num(value)) {\n      this.startPosition = value;\n      this.lastPosition = value;\n    }\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(value, flush) {\n    this.value = value;\n\n    if (flush !== false) {\n      if (!this.views.size) {\n        collectViews(this, this.views);\n      }\n\n      each(this.views, view => view.update());\n    }\n  }\n\n  to() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return createAnimatedInterpolation(this, ...args);\n  }\n\n  interpolate() {\n    deprecateInterpolate();\n    return this.to(...arguments);\n  }\n\n  reset(isActive) {\n    if (is.num(this.value)) {\n      this.startPosition = this.value;\n      this.lastPosition = this.value;\n      this.lastVelocity = isActive ? this.lastVelocity : undefined;\n      this.lastTime = isActive ? this.lastTime : undefined;\n      this.startTime = now();\n    }\n\n    this.done = false;\n    this.views.clear();\n  } // Do nothing for either of these.\n\n\n  _attach() {}\n\n  _detach() {}\n\n}\n/**\r\n * This library works by building a directed acyclic graph of dependencies\r\n * transparently whenever you render your Animated components.\r\n *\r\n *               new Animated.Value(0)\r\n *     .interpolate()        .interpolate()    new Animated.Value(1)\r\n *         opacity               translateY      scale\r\n *          style                         transform\r\n *         View#234                         style\r\n *                                         View#123\r\n *\r\n * A) Top Down phase\r\n * When an AnimatedValue is updated, we recursively go down through this\r\n * graph in order to find leaf nodes: the components that depend on our value.\r\n *\r\n * B) Bottom Up phase\r\n * When a view is flagged as needing an update, we recursively go back up\r\n * in order to build the new props that it needs. This two-phase process is\r\n * necessary because some props (eg: \"transform\") can have multiple parents.\r\n */\n\n\nfunction collectViews(node, views) {\n  if ('update' in node) {\n    views.add(node);\n  } else {\n    each(node.getChildren(), child => collectViews(child, views));\n  }\n}\n/** An array of animated nodes */\n\n\nclass AnimatedArray extends AnimatedObject {\n  constructor(source) {\n    super(source);\n  }\n\n  getValue(animated) {\n    return this.source.map(node => node.getValue(animated));\n  }\n\n  setValue(value, flush) {\n    const nodes = this.payload;\n\n    if (is.arr(value)) {\n      invariant(value.length == nodes.size);\n      let i = 0;\n      each(nodes, node => node.setValue(value[i++], flush));\n    } else {\n      each(nodes, node => node.setValue(value, flush));\n    }\n  }\n\n  to() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return createAnimatedInterpolation(this, ...args);\n  }\n\n  interpolate() {\n    deprecateInterpolate();\n    return this.to(...arguments);\n  }\n\n  updatePayload(prev, next) {\n    const source = [...this.source];\n    each(source, (val, index) => {\n      if (val === prev) source[index] = next;\n    });\n    this.source = source;\n    this.payload = toPayload(source);\n  }\n\n}\n\nclass AnimatedProps extends AnimatedObject {\n  constructor(props, update) {\n    super(props.style && createAnimatedStyle ? _extends({}, props, {\n      style: createAnimatedStyle(props.style)\n    }) : props);\n    this.update = update;\n  }\n\n}\n\nconst cacheKey = Symbol.for('AnimatedComponent');\n\nconst withAnimated = Component => is.str(Component) ? createAnimatedComponent(Component) : Component[cacheKey] || (Component[cacheKey] = createAnimatedComponent(Component));\n\nconst createAnimatedComponent = Component => forwardRef((rawProps, ref) => {\n  const node = useRef(null);\n  const props = useRef(null);\n  const forceUpdate = useForceUpdate();\n  const nextProps = new AnimatedProps(rawProps, () => {\n    const didUpdate = !!node.current && applyAnimatedValues(node.current, nextProps.getValue(true)); // Re-render the component when native updates fail.\n\n    if (didUpdate === false) {\n      forceUpdate();\n    }\n  });\n  useEffect(() => {\n    const prevProps = props.current;\n    props.current = nextProps; // To avoid causing a cascade of detachment, we must detach\n    // the old props only *after* the new props are attached.\n\n    nextProps._attach();\n\n    if (prevProps) {\n      prevProps._detach();\n    }\n  }); // Ensure the latest props are detached on unmount.\n\n  useOnce(() => () => {\n    props.current._detach();\n  }); // Functions cannot have refs (see #569)\n\n  const refFn = !is.fun(Component) || Component.prototype.isReactComponent ? value => node.current = updateRef(ref, value) : void 0;\n  rawProps = getComponentProps(nextProps.getValue());\n  return React.createElement(Component, Object.assign({}, rawProps, {\n    ref: refFn\n  }));\n});\n\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is.fun(ref)) ref(value);else ref.current = value;\n  }\n\n  return value;\n}\n/**\r\n * Pass the given components to `withAnimated` and add the newly animated\r\n * components to `withAnimated` as properties.\r\n */\n\n\nconst extendAnimated = (withAnimated, components, lowercase) => {\n  components.forEach(Component => {\n    let key = getDisplayName(Component);\n\n    if (lowercase) {\n      key = key[0].toLowerCase() + key.slice(1);\n    }\n\n    withAnimated[key] = withAnimated(Component);\n  });\n  return withAnimated;\n};\n\nconst getDisplayName = arg => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;\n\nexport { Animated, AnimatedArray, AnimatedInterpolation, AnimatedObject, AnimatedProps, AnimatedStyle, AnimatedValue, addChild, animatedTag, extendAnimated, interpolate, isAnimated, removeChild, toPayload, withAnimated };","map":null,"metadata":{},"sourceType":"module"}