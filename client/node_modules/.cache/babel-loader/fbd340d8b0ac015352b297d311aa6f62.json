{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nexports.is = {\n  arr: Array.isArray,\n  obj: function (a) {\n    return !!a && a.constructor.name === 'Object';\n  },\n  fun: function (a) {\n    return typeof a === 'function';\n  },\n  str: function (a) {\n    return typeof a === 'string';\n  },\n  num: function (a) {\n    return typeof a === 'number';\n  },\n  und: function (a) {\n    return a === void 0;\n  },\n  boo: function (a) {\n    return typeof a === 'boolean';\n  }\n};\n/** An unsafe object/array/set iterator that allows for better minification */\n\nexports.each = function (obj, cb, ctx) {\n  if (exports.is.fun(obj.forEach)) {\n    obj.forEach(cb, ctx);\n  } else {\n    Object.keys(obj).forEach(function (key) {\n      return cb.call(ctx, obj[key], key);\n    });\n  }\n};\n\nexports.toArray = function (a) {\n  return exports.is.und(a) ? [] : Array.isArray(a) ? a : [a];\n};\n\nexports.useOnce = function (effect) {\n  return react_1.useEffect(effect, []);\n};\n\nexports.useForceUpdate = function () {\n  return react_1.useReducer(function () {\n    return {};\n  }, 0)[1];\n};\n/** Use a value from the previous render */\n\n\nfunction usePrev(value) {\n  var prevRef = react_1.useRef(undefined);\n  var prev = prevRef.current;\n  prevRef.current = value;\n  return prev;\n}\n\nexports.usePrev = usePrev;","map":null,"metadata":{},"sourceType":"script"}