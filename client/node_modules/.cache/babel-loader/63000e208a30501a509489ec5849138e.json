{"ast":null,"code":"import _slicedToArray from \"/Users/vlecoq-v/42/NewMatcha/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vlecoq-v/42/NewMatcha/client/src/Scenes/SignIn/Components/Register/Register.js\";\nimport React, { useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\"; // import { DisplayFormikState } from './formikHelper';\n\nconst styles = {};\n\nfunction Register(props) {\n  const classes = props.classes;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSubmitionCompleted = _useState4[0],\n        setSubmitionCompleted = _useState4[1];\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleClickOpen() {\n    setSubmitionCompleted(false);\n    setOpen(true);\n  }\n\n  const initialState = {\n    login: \"\",\n    email: \"\",\n    password: \"\"\n  };\n  const userSchema = yup.object().shape({\n    login: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().required().matches(/[a-z]+/, \"Password must contain at least one non-capital letter.\").matches(/[A-Z]+/, \"Password must contain at least one capital letter.\").matches(/[0-9]+/, \"Password must contain at least one digit.\").matches(/[!@#$%^&*()]+/, \"Password must contain at least one special character among : !@#$%^&*().\").max(13).min(4)\n  });\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Create an Account\"), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose // aria-labelledby=\"form-dialog-title\"\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, !isSubmitionCompleted && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Reister\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Please complete the form to meet new people\"), React.createElement(Formik, {\n    initialValues: initialState,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setSubmitting(true);\n      axios.post(\"http://localhost:9000/register\", values, {\n        headers: {\n          // \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res);\n      }).then(res => {\n        setSubmitionCompleted(true);\n      });\n    },\n    validationSchema: userSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, props => {\n    const values = props.values,\n          touched = props.touched,\n          errors = props.errors,\n          dirty = props.dirty,\n          isSubmitting = props.isSubmitting,\n          handleChange = props.handleChange,\n          handleBlur = props.handleBlur,\n          handleSubmit = props.handleSubmit,\n          handleReset = props.handleReset;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"login\",\n      name: \"login\",\n      className: classes.textField,\n      value: values.login,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.login && touched.login && errors.login,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      error: errors.email && touched.email,\n      label: \"email\",\n      name: \"email\",\n      className: classes.textField,\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.email && touched.email && errors.email,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      error: errors.password && touched.password,\n      label: \"password\",\n      name: \"password\",\n      className: classes.textField,\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.password && touched.password && errors.password,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      className: \"outline\",\n      onClick: handleReset,\n      disabled: !dirty || isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(Button, {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Submit\")));\n  }))), isSubmitionCompleted && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Thanks!\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Thanks\"), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Back to app\"))))));\n}\n\nexport default withStyles(styles)(Register);","map":{"version":3,"sources":["/Users/vlecoq-v/42/NewMatcha/client/src/Scenes/SignIn/Components/Register/Register.js"],"names":["React","useState","withStyles","TextField","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","axios","Formik","yup","styles","Register","props","classes","open","setOpen","isSubmitionCompleted","setSubmitionCompleted","handleClose","handleClickOpen","initialState","login","email","password","userSchema","object","shape","string","required","matches","max","min","values","setSubmitting","post","headers","then","res","console","log","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","textField"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\n// import { DisplayFormikState } from './formikHelper';\n\nconst styles = {};\n\nfunction Register(props) {\n  const { classes } = props;\n  const [open, setOpen] = useState(false);\n  const [isSubmitionCompleted, setSubmitionCompleted] = useState(false);\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleClickOpen() {\n    setSubmitionCompleted(false);\n    setOpen(true);\n  }\n\n  const initialState = {\n    login: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  const userSchema = yup.object().shape({\n    login: yup.string().required(),\n    email: yup\n      .string()\n      .email()\n      .required(),\n    password: yup\n      .string()\n      .required()\n      .matches(\n        /[a-z]+/,\n        \"Password must contain at least one non-capital letter.\"\n      )\n      .matches(/[A-Z]+/, \"Password must contain at least one capital letter.\")\n      .matches(/[0-9]+/, \"Password must contain at least one digit.\")\n      .matches(\n        /[!@#$%^&*()]+/,\n        \"Password must contain at least one special character among : !@#$%^&*().\"\n      )\n      .max(13)\n      .min(4)\n  });\n\n  return (\n    <React.Fragment>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Create an Account\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        // aria-labelledby=\"form-dialog-title\"\n      >\n        {!isSubmitionCompleted && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Reister</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Please complete the form to meet new people\n              </DialogContentText>\n              <Formik\n                initialValues={initialState}\n                onSubmit={(values, { setSubmitting }) => {\n                  setSubmitting(true);\n                  axios\n                    .post(\"http://localhost:9000/register\", values, {\n                      headers: {\n                        // \"Access-Control-Allow-Origin\": \"*\",\n                        \"Content-Type\": \"application/json\"\n                      }\n                    })\n                    .then(res => {\n                      console.log(res);\n                    })\n                    .then(res => {\n                      setSubmitionCompleted(true);\n                    });\n                }}\n                validationSchema={userSchema}\n              >\n                {props => {\n                  const {\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    handleReset\n                  } = props;\n                  return (\n                    <form onSubmit={handleSubmit}>\n                      <TextField\n                        label=\"login\"\n                        name=\"login\"\n                        className={classes.textField}\n                        value={values.login}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.login && touched.login && errors.login\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <TextField\n                        error={errors.email && touched.email}\n                        label=\"email\"\n                        name=\"email\"\n                        className={classes.textField}\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.email && touched.email && errors.email\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <br />\n                      <TextField\n                        error={errors.password && touched.password}\n                        label=\"password\"\n                        name=\"password\"\n                        className={classes.textField}\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.password && touched.password && errors.password\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <DialogActions>\n                        <Button\n                          type=\"button\"\n                          className=\"outline\"\n                          onClick={handleReset}\n                          disabled={!dirty || isSubmitting}\n                        >\n                          Reset\n                        </Button>\n                        <Button type=\"submit\" disabled={isSubmitting}>\n                          Submit\n                        </Button>\n                        {/* <DisplayFormikState {...props} /> */}\n                      </DialogActions>\n                    </form>\n                  );\n                }}\n              </Formik>\n            </DialogContent>\n          </React.Fragment>\n        )}\n        {isSubmitionCompleted && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Thanks!</DialogTitle>\n            <DialogContent>\n              <DialogContentText>Thanks</DialogContentText>\n              <DialogActions>\n                <Button type=\"button\" className=\"outline\" onClick={handleClose}>\n                  Back to app\n                </Button>\n                {/* <DisplayFormikState {...props} /> */}\n              </DialogActions>\n            </DialogContent>\n          </React.Fragment>\n        )}\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(Register);\n"]},"metadata":{},"sourceType":"module"}