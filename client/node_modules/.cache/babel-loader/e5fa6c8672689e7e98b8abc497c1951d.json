{"ast":null,"code":"import _slicedToArray from \"/Users/morgani/AAAA/Matcha/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/morgani/AAAA/Matcha/client/src/Scenes/Home/Components/Login/Login.js\";\nimport React, { useState } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport UserValidation from \"../UserValidation\";\nimport { useCookies } from \"react-cookie\"; // import { DisplayFormikState } from './formikHelper';\n\nconst styles = {};\nconst useStyle = makeStyles({\n  div: {\n    color: \"white\"\n  }\n});\n\nfunction Register() {\n  // const { classes } = props;\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSubmitionCompleted = _useState4[0],\n        setSubmitionCompleted = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isValid = _useState6[0],\n        setValid = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        textError = _useState8[0],\n        setTextError = _useState8[1];\n\n  const _useCookies = useCookies([\"auth\"]),\n        _useCookies2 = _slicedToArray(_useCookies, 2),\n        cookies = _useCookies2[0],\n        setCookie = _useCookies2[1];\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleClickOpen() {\n    setSubmitionCompleted(false);\n    setOpen(true);\n  }\n\n  const initialState = {\n    login: \"\",\n    password: \"\"\n  };\n  const classes = useStyle();\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.div,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Login\")), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose // aria-labelledby=\"form-dialog-title\"\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, !isSubmitionCompleted && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Login\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Hello there,\"), React.createElement(Formik, {\n    initialValues: initialState,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setSubmitting(true);\n      axios.post(\"http://localhost:9000/api/user/login\", values, {\n        headers: {\n          // \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(\"response de l'API\", res); // CONNECTION SUCCESS\n\n        if (res.status === 200) {\n          setSubmitionCompleted(true);\n          setCookie(\"auth\", res.data.uuid, {\n            // httpOnly: true,\n            // HERE SECURITY QUESTION, WITHOUT HTTPONLY, COOKIES ARE POTENTIALLY VULNERABLE (NOT IN CHROME)\n            path: \"/\"\n          });\n        } else {\n          // CONNECTION FAILURE\n          let errorStr = \"\";\n          setSubmitionCompleted(true);\n          setValid(false);\n\n          if (typeof res.data !== \"string\") {\n            for (let strKey in res.data) {\n              errorStr += res.data[strKey] + \"\\n\";\n            }\n          } else {\n            errorStr = res.data;\n          }\n\n          setTextError(errorStr.trim());\n        }\n      });\n    },\n    validate: UserValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, props => {\n    const values = props.values,\n          touched = props.touched,\n          errors = props.errors,\n          dirty = props.dirty,\n          isSubmitting = props.isSubmitting,\n          handleChange = props.handleChange,\n          handleBlur = props.handleBlur,\n          handleSubmit = props.handleSubmit,\n          handleReset = props.handleReset; // console.log(errors.login, touched.login);\n\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"login\",\n      name: \"login\" // className={textField}\n      ,\n      value: values.login,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.login && touched.login && errors.login,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      error: errors.password && touched.password,\n      label: \"password\",\n      name: \"password\" // className={classes.textField}\n      ,\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.password && touched.password && errors.password,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      className: \"outline\",\n      onClick: handleReset,\n      disabled: !dirty || isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(Button, {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Submit\")));\n  }))), isSubmitionCompleted && isValid && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Logged In!\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"You successfully logged in\"), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Back to app\")))), isSubmitionCompleted && !isValid && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Oupsy!\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, textError), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Back to app\"))))));\n}\n\nexport default withStyles(styles)(Register);","map":{"version":3,"sources":["/Users/morgani/AAAA/Matcha/client/src/Scenes/Home/Components/Login/Login.js"],"names":["React","useState","withStyles","makeStyles","TextField","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","axios","Formik","UserValidation","useCookies","styles","useStyle","div","color","Register","open","setOpen","isSubmitionCompleted","setSubmitionCompleted","isValid","setValid","textError","setTextError","cookies","setCookie","handleClose","handleClickOpen","initialState","login","password","classes","values","setSubmitting","post","headers","then","res","console","log","status","data","uuid","path","errorStr","strKey","trim","props","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport UserValidation from \"../UserValidation\";\nimport { useCookies } from \"react-cookie\";\n// import { DisplayFormikState } from './formikHelper';\n\nconst styles = {};\nconst useStyle = makeStyles({\n  div: {\n    color: \"white\"\n  }\n});\nfunction Register() {\n  // const { classes } = props;\n  const [open, setOpen] = useState(false);\n  const [isSubmitionCompleted, setSubmitionCompleted] = useState(false);\n  const [isValid, setValid] = useState(true);\n  const [textError, setTextError] = useState(\"\");\n  const [cookies, setCookie] = useCookies([\"auth\"]);\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleClickOpen() {\n    setSubmitionCompleted(false);\n    setOpen(true);\n  }\n\n  const initialState = {\n    login: \"\",\n    password: \"\"\n  };\n\n  const classes = useStyle();\n\n  return (\n    <React.Fragment>\n      <Button onClick={handleClickOpen}>\n        <div className={classes.div}>Login</div>\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        // aria-labelledby=\"form-dialog-title\"\n      >\n        {!isSubmitionCompleted && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Login</DialogTitle>\n            <DialogContent>\n              <DialogContentText>Hello there,</DialogContentText>\n              <Formik\n                initialValues={initialState}\n                onSubmit={(values, { setSubmitting }) => {\n                  setSubmitting(true);\n                  axios\n                    .post(\"http://localhost:9000/api/user/login\", values, {\n                      headers: {\n                        // \"Access-Control-Allow-Origin\": \"*\",\n                        \"Content-Type\": \"application/json\"\n                      }\n                    })\n                    .then(res => {\n                      console.log(\"response de l'API\", res);\n                      // CONNECTION SUCCESS\n                      if (res.status === 200) {\n                        setSubmitionCompleted(true);\n                        setCookie(\"auth\", res.data.uuid, {\n                          // httpOnly: true,\n                          // HERE SECURITY QUESTION, WITHOUT HTTPONLY, COOKIES ARE POTENTIALLY VULNERABLE (NOT IN CHROME)\n                          path: \"/\"\n                        });\n                      } else {\n                        // CONNECTION FAILURE\n                        let errorStr = \"\";\n                        setSubmitionCompleted(true);\n                        setValid(false);\n                        if (typeof res.data !== \"string\") {\n                          for (let strKey in res.data) {\n                            errorStr += res.data[strKey] + \"\\n\";\n                          }\n                        } else {\n                          errorStr = res.data;\n                        }\n                        setTextError(errorStr.trim());\n                      }\n                    });\n                }}\n                validate={UserValidation}\n              >\n                {props => {\n                  const {\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    handleReset\n                  } = props;\n\n                  // console.log(errors.login, touched.login);\n                  return (\n                    <form onSubmit={handleSubmit}>\n                      <TextField\n                        label=\"login\"\n                        name=\"login\"\n                        // className={textField}\n                        value={values.login}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.login && touched.login && errors.login\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <br />\n                      <TextField\n                        error={errors.password && touched.password}\n                        label=\"password\"\n                        name=\"password\"\n                        // className={classes.textField}\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        helperText={\n                          errors.password && touched.password && errors.password\n                        }\n                        margin=\"normal\"\n                      />\n\n                      <DialogActions>\n                        <Button\n                          type=\"button\"\n                          className=\"outline\"\n                          onClick={handleReset}\n                          disabled={!dirty || isSubmitting}\n                        >\n                          Reset\n                        </Button>\n                        <Button type=\"submit\" disabled={isSubmitting}>\n                          Submit\n                        </Button>\n                        {/* <DisplayFormikState {...props} /> */}\n                      </DialogActions>\n                    </form>\n                  );\n                }}\n              </Formik>\n            </DialogContent>\n          </React.Fragment>\n        )}\n        {isSubmitionCompleted && isValid && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Logged In!</DialogTitle>\n            <DialogContent>\n              <DialogContentText>You successfully logged in</DialogContentText>\n              <DialogActions>\n                <Button type=\"button\" className=\"outline\" onClick={handleClose}>\n                  Back to app\n                </Button>\n                {/* <DisplayFormikState {...props} /> */}\n              </DialogActions>\n            </DialogContent>\n          </React.Fragment>\n        )}\n        {isSubmitionCompleted && !isValid && (\n          <React.Fragment>\n            <DialogTitle id=\"form-dialog-title\">Oupsy!</DialogTitle>\n            <DialogContent>\n              <DialogContentText>{textError}</DialogContentText>\n              <DialogActions>\n                <Button type=\"button\" className=\"outline\" onClick={handleClose}>\n                  Back to app\n                </Button>\n                {/* <DisplayFormikState {...props} /> */}\n              </DialogActions>\n            </DialogContent>\n          </React.Fragment>\n        )}\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(Register);\n"]},"metadata":{},"sourceType":"module"}