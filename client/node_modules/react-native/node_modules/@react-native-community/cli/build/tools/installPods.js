"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function () {
    return data;
  };

  return data;
}

function _execa() {
  const data = _interopRequireDefault(require("execa"));

  _execa = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _inquirer() {
  const data = _interopRequireDefault(require("inquirer"));

  _inquirer = function () {
    return data;
  };

  return data;
}

function _commandExists() {
  const data = _interopRequireDefault(require("command-exists"));

  _commandExists = function () {
    return data;
  };

  return data;
}

function _cliTools() {
  const data = require("@react-native-community/cli-tools");

  _cliTools = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const COCOAPODS_INSTALLATION_TIMEOUT = 30000;

async function installPods({
  projectName,
  loader
}) {
  try {
    if (!_fs().default.existsSync('ios')) {
      return;
    }

    process.chdir('ios');

    const hasPods = _fs().default.existsSync('Podfile');

    if (!hasPods) {
      return;
    }

    try {
      await (0, _commandExists().default)('pod');
    } catch (e) {
      if (loader) {
        loader.stop();
      }

      const {
        shouldInstallCocoaPods
      } = await _inquirer().default.prompt([{
        type: 'confirm',
        name: 'shouldInstallCocoaPods',
        message: `CocoaPods ${_chalk().default.dim.underline('(https://cocoapods.org/)')} ${_chalk().default.reset.bold("is not installed. It's necessary for iOS project to run correctly. Do you want to install it?")}`
      }]);

      if (shouldInstallCocoaPods) {
        // Show a helpful notice when installation takes more than usually
        const cocoaPodsInstallationTimeMessage = setTimeout(() => _cliTools().logger.info('Installing CocoaPods, this may take a few minutes'), COCOAPODS_INSTALLATION_TIMEOUT);

        try {
          // First attempt to install `cocoapods`
          await (0, _execa().default)('gem', ['install', 'cocoapods']);
        } catch (_error) {
          try {
            // If that doesn't work then try with sudo
            await (0, _execa().default)('sudo', ['gem', 'install', 'cocoapods']);
          } catch (error) {
            _cliTools().logger.log(error.stderr);

            throw new Error(`Error occured while trying to install CocoaPods, which is required by this template.\nPlease try again manually: "sudo gem install cocoapods".\nCocoaPods documentation: ${_chalk().default.dim.underline('https://cocoapods.org/')}`);
          }
        } finally {
          clearTimeout(cocoaPodsInstallationTimeMessage);
        } // This only shows when `CocoaPods` is automatically installed,
        // if it's already installed then we just show the `Installing dependencies` step


        if (loader) {
          loader.start('Installing CocoaPods dependencies');
        }
      }
    }

    try {
      await (0, _execa().default)('pod', ['install']);
    } catch (error) {
      // "pod" command outputs errors to stdout (at least some of them)
      _cliTools().logger.log(error.stderr || error.stdout);

      throw new Error(`Failed to install CocoaPods dependencies for iOS project, which is required by this template.\nPlease try again manually: "cd ./${projectName}/ios && pod install".\nCocoaPods documentation: ${_chalk().default.dim.underline('https://cocoapods.org/')}`);
    }
  } catch (error) {
    throw error;
  } finally {
    process.chdir('..');
  }
}

var _default = installPods;
exports.default = _default;