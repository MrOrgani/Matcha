"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processTemplateName = processTemplateName;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _url() {
  const data = require("url");

  _url = function () {
    return data;
  };

  return data;
}

var _fetch = require("../../tools/fetch");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FILE_PROTOCOL = /file:/;
const HTTP_PROTOCOL = /https?:/;
const TARBALL = /\.tgz$/;
const VERSION_POSTFIX = /(.*)(-\d+\.\d+\.\d+)/;
const VERSIONED_PACKAGE = /(@?.*)(@)(.*)/;

function handleFileProtocol(filePath) {
  const uri = new (_url().URL)(filePath).pathname;
  return {
    uri,
    name: require(_path().default.join(uri, 'package.json')).name
  };
}

function handleTarball(filePath) {
  const nameWithVersion = _path().default.parse(_path().default.basename(filePath)).name;

  const tarballVersionMatch = nameWithVersion.match(VERSION_POSTFIX);

  if (!tarballVersionMatch) {
    throw new Error(`Failed to retrieve tarball name. We expect the tarball to include package name and version, e.g.: "template-name-1.2.3-rc.0.tgz", but received: "${nameWithVersion}".`);
  }

  return {
    uri: filePath,
    name: tarballVersionMatch[1]
  };
}

function handleVersionedPackage(versionedPackage) {
  const versionedPackageMatch = versionedPackage.match(VERSIONED_PACKAGE);

  if (!versionedPackageMatch) {
    throw new Error(`Failed to retrieve package name. We expect the package to include name and version, e.g.: "template-name@1.2.3-rc.0", but received: "${versionedPackage}".`);
  }

  return {
    uri: versionedPackage,
    name: versionedPackageMatch[1]
  };
}

async function processTemplateName(templateName) {
  if (templateName.match(TARBALL)) {
    return handleTarball(templateName);
  }

  if (templateName.match(FILE_PROTOCOL)) {
    return handleFileProtocol(templateName);
  }

  if (templateName.match(VERSIONED_PACKAGE)) {
    return handleVersionedPackage(templateName);
  }

  const name = await tryTemplateShorthand(templateName);
  return {
    uri: name,
    name
  };
}
/**
 * `init` may be invoked with a shorthand like `--template typescript`
 * which should resolve to `react-native-template-typescript` package.
 * To support that, we query npm registry if a package like this exists, if not
 * we return the original name without a change.
 */


async function tryTemplateShorthand(templateName) {
  if (templateName.match(FILE_PROTOCOL) || templateName.match(HTTP_PROTOCOL)) {
    return templateName;
  }

  try {
    const reactNativeTemplatePackage = `react-native-template-${templateName}`;
    const response = await (0, _fetch.fetch)(`https://registry.yarnpkg.com/${reactNativeTemplatePackage}/latest`);

    if (JSON.parse(response).name) {
      return reactNativeTemplatePackage;
    }
  } catch (e) {// we expect this to fail when `file://` protocol or regular module is passed
  }

  return templateName;
}